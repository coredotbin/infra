#! /usr/sbin/nft -f

# Flush ruleset before configuring
flush ruleset

# Variables
# WAN
define wan = eth0
define wan_addr = 134.122.9.153
# LAN
define lan = eth1
# WireGuard
define vpn = wg0
define vpn_net = 10.254.254.0/24
define vpn_udp = 51820
# Minecraft
define minecraft_host = 172.16.1.18
define minecraft_tcp = 25565
define minecraft_udp = 19132

table inet firewall {
	# Sets of ports, addresses, etc. to be used in rules
	# Accepted TCP ports
	set tcp_accepted {
		# The "inet_service" are for tcp/udp ports.
		type inet_service;
		elements = {
			ssh
		}
	}
	
	# Accepted UDP ports
	set udp_accepted {
		type inet_service;
		elements = {
			$vpn_udp
		}
	}

	chain incoming {
		# Default drop policy
		type filter hook input priority 0; policy drop;
	
		ct state established,related accept comment "Accept incoming established and related traffic"
		ct state invalid drop comment "Drop invalid traffic"
	
		iif lo accept comment "Accept loopback traffic"

		ip protocol icmp icmp type { destination-unreachable, echo-reply, echo-request, source-quench, time-exceeded } accept comment "Accept certain ICMP types"
		ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, echo-reply, echo-request, nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert, packet-too-big, parameter-problem, time-exceeded } accept comment "Accept certain ICMPv6 types"
		
		# Allow tcp and udp ports
		iifname $wan tcp dport @tcp_accepted ct state new accept comment "Accept TCP from ports in tcp_accepted set"
		iifname $wan udp dport @udp_accepted ct state new accept comment "Accept UDP from ports in udp_accepted set"
	}

	chain forwarding {
		type filter hook forward priority 0; policy drop;

		ct state established,related accept comment "Forward all established and related traffic."
		ct state invalid drop comment "Drop invalid traffic"

		iifname $vpn accept comment "Forward WireGuard traffic"
		mark 1 accept comment "Forward traffic to Minecraft"
	}
	
	chain outgoing {
		type filter hook output priority 0; policy accept;
	}
}

# Define some base chains for later rules
table ip nat {
	chain prerouting {
		type nat hook prerouting priority -100;
		iifname $wan jump external-pre comment "WAN (external) traffic jump to external-pre"
		#iifname $wan tcp dport $minecraft_tcp mark set 1 dnat to 172.16.1.18:25565 #$minecraft_host:$minecraft_tcp
		#iifname $wan udp dport $minecraft_udp mark set 1 dnat to 172.16.1.18:19132 #$minecraft_host:$minecraft_udp
	}
	chain external-pre {
		tcp dport $minecraft_tcp mark set 1 dnat to 172.16.1.18:25565 #$minecraft_host:$minecraft_tcp
		udp dport $minecraft_udp mark set 1 dnat to 172.16.1.18:19132 #$minecraft_host:$minecraft_udp
	}
	chain postrouting {
		type nat hook postrouting priority 100;
		
		# These are current rules set up by iptables
		# *nat
		# :PREROUTING ACCEPT [394769:27116097]
		# :INPUT ACCEPT [14482:979058]
		# :OUTPUT ACCEPT [17210:1186253]
		# :POSTROUTING ACCEPT [299945:22175993]
		# -A POSTROUTING -o eth0 -j MASQUERADE
		# -A POSTROUTING -o eth1 -j MASQUERADE

		oifname $wan ip saddr $vpn_net masquerade comment "Masquerade WireGuard traffic to the Internet"
		oifname $lan ip saddr $vpn_net masquerade comment "Masquerade WireGuard traffic to the LAN"
	}
}
