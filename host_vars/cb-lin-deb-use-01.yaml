---

# ironicbadger.docker_compose_generator
appdata_path: /var/appdata
media_path: /var/media

# Container definitions
containers:
  - service_name: traefik
    active: true
    image: traefik
    network_mode: host
    ports:
      # http
      - 80:80
      # https
      - 443:443
    command:
      - --api.dashboard=false

      - --providers.docker
      - --providers.docker.exposedByDefault=false

      # Entrypoints
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.http.http.redirections.entryPoint.scheme=https

      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.certresolver=linode

      # Let's Encrypt certificates
      - --certificatesResolvers.linode.acme.dnsChallenge.provider=linode
      - "--certificatesResolvers.linode.acme.email={{ admin_email_address }}"
      - --certificatesResolvers.linode.acme.storage=/etc/traefik/acme.json
    environment:
      - "LINODE_TOKEN={{ linode_dns_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik/config:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
  - service_name: mysql
    active: true
    image: mysql:5.7
    volumes:
      - "{{ appdata_path }}/mysql:/var/lib/mysql"
    environment:
      - "MYSQL_DATABASE={{ wordpress.mysql_database }}"
      - "MYSQL_USER={{ wordpress.mysql_user }}"
      - "MYSQL_PASSWORD={{ wordpress.mysql_password }}"
      - MYSQL_RANDOM_ROOT_PASSWORD=1
    restart: always
  # Wordpress - https://hub.docker.com/_/wordpress
  - service_name: wordpress
    active: true
    image: wordpress
    labels:
      - traefik.enable=true
      - "traefik.http.routers.wordpress.rule=\
         (Host(`kspier.net`) || Host(`www.kspier.net`))"
      - traefik.http.services.wordpress.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/wordpress:/var/www/html"
    environment:
      - WORDPRESS_DB_HOST=mysql
      - "WORDPRESS_DB_NAME={{ wordpress.mysql_database }}"
      - "WORDPRESS_DB_USER={{ wordpress.mysql_user }}"
      - "WORDPRESS_DB_PASSWORD={{ wordpress.mysql_password }}"
    restart: unless-stopped

  # PostgreSQL
  - service_name: postgres
    active: true
    image: postgres:14
    environment:
      - "POSTGRES_USER={{ main_username }}"
      - "POSTGRES_PASSWORD={{ postgres.password }}"
      - "POSTGRES_MULTIPLE_DATABASES=\
         gitea:{{ postgres.gitea_password }},\
         woodpecker:{{ postgres.woodpecker_password }}"
    volumes:
      - "{{ appdata_path }}/postgresql/data:/var/lib/postgresql/data"
    restart: unless-stopped
  # Gitea - https://docs.gitea.io/en-us/install-with-docker/
  - service_name: gitea
    active: true
    image: gitea/gitea:1.19.3
    labels:
      - traefik.enable=true
      - "traefik.http.routers.gitea.rule=Host(`git.{{ domain_name }}`)"
      - traefik.http.services.gitea.loadbalancer.server.port=3000
    include_global_env_vars: true
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - "GITEA__database__PASS={{ postgres.gitea_password }}"
    volumes:
      - "{{ appdata_path }}/gitea:/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
    restart: unless-stopped
  # Woodpecker CI - https://woodpecker-ci.org/docs/administration/setup
  # Front end and agent orchestration
  # https://containers.fan/posts/setup-gitea-with-woodpecker-ci/
  # https://github.com/woodpecker-ci/woodpecker/blob/master/docs/docs/
  # 30-administration/70-proxy.md#traefik
  - service_name: woodpecker-server
    active: true
    image: "woodpeckerci/woodpecker-server:{{ woodpecker.version_tag }}"
    labels:
      - traefik.enable=true

      # Web server
      - "traefik.http.routers.woodpecker.rule=\
         Host(`ci.{{ domain_name }}`)"
      # - traefik.http.routers.woodpecker.service=woodpecker
      - traefik.http.services.woodpecker.loadbalancer.server.port=8000

      # gRPC service
      # Don't need this - Agent will communicate directly through Docker network
      # - "traefik.http.routers.woodpecker-grpc.rule=\
      #   Host(`woodpecker-grpc.{{ domain_name }}`)"
      # - traefik.http.routers.woodpecker-grpc.service=woodpecker-grpc
      # - traefik.http.services.woodpecker-grpc.loadbalancer.server.port=9000
      # - traefik.http.services.woodpecker-grpc.loadbalancer.server.scheme=h2c
    extra_hosts:
      - "git.cbarts.net:traefik"
    depends_on:
      - postgres
    volumes:
      - "{{ appdata_path }}/woodpecker/server:/var/lib/woodpecker"
    environment:
      # Requires PostgreSQL >= 11
      # https://woodpecker-ci.org/docs/administration/
      # database#configure-postgres
      - WOODPECKER_DATABASE_DRIVER=postgres
      - "WOODPECKER_DATABASE_DATASOURCE=postgres://woodpecker:\
        {{ postgres.woodpecker_password }}@postgres:5432/postgres?\
        sslmode=disable"
      - WOODPECKER_OPEN=true
      - "WOODPECKER_HOST=https://ci.{{ domain_name }}"
      - "WOODPECKER_AGENT_SECRET={{ woodpecker.agent_secret }}"
      - WOODPECKER_GITEA=true
      - "WOODPECKER_GITEA_URL=https://git.{{ domain_name }}"
      - "WOODPECKER_GITEA_CLIENT={{ woodpecker.gitea_client }}"
      - "WOODPECKER_GITEA_SECRET={{ woodpecker.gitea_secret }}"
    restart: unless-stopped
  # Woodpecker Agent
  # > You can add more agents to increase the number of parallel builds or set
  # > the agent's WOODPECKER_MAX_PROCS=1 environment variable to increase the
  # > number of parallel builds for that agent.
  - service_name: woodpecker-agent
    active: true
    image: "woodpeckerci/woodpecker-agent:{{ woodpecker.version_tag }}"
    command: agent
    volumes:
      # Agents run pipelien steps as Docker containers
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Woodpecker Agent configuration
      # https://woodpecker-ci.org/docs/administration/agent-config
      - WOODPECKER_SERVER=woodpecker-server:9000
      - "WOODPECKER_AGENT_SECRET={{ woodpecker.agent_secret }}"
    depends_on:
      - woodpecker-server
    restart: unless-stopped

autorestic_locations:
  - name: cb-lin-deb-use-01-app-data
    from: "{{ appdata_path }}"
    to:
      - backblaze
