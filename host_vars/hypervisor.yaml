---

# ironicbadger.docker_compose_generator
appdata_path: /pool1/app-data
media_path: /pool1/media

# Container definitions
containers:
  - service_name: traefik
    active: true
    image: traefik
    ports:
      # http
      - 80:80
      # https
      - 443:443
      # unifi-inform
      - 8080:8080
    command:
      - --api.dashboard=true

      - --providers.docker
      - --providers.docker.exposedByDefault=false

      # Entrypoints
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.http.http.redirections.entryPoint.scheme=https

      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.certresolver=linode
      - "--entrypoints.https.http.tls.domains[0].main={{ domain_name }}"
      - "--entrypoints.https.http.tls.domains[0].sans=*.{{ domain_name }}"

      - --entrypoints.unifi-inform.address=:8080

      # Let's Encrypt certificates
      - --certificatesResolvers.linode.acme.dnsChallenge.provider=linode
      - "--certificatesResolvers.linode.acme.email={{ admin_email_address }}"
      - --certificatesResolvers.linode.acme.storage=/etc/traefik/acme.json

      - --serversTransport.insecureSkipVerify=true

      # Metrics
      - --metrics.influxdb2.address=http://influxdb:8086
      - "--metrics.influxdb2.token={{ influxdb.traefik_token }}"
      - "--metrics.influxdb2.org={{ influxdb.org }}"
      - "--metrics.influxdb2.bucket={{ influxdb.bucket }}"
    environment:
      - "LINODE_TOKEN={{ linode_dns_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik/config:/etc/traefik"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - treafik.http.routers.api.entrypoints=http
      - "traefik.http.routers.api.rule=Host(`traefik.{{ domain_name }}`)"
      - traefik.http.routers.api.service=api@internal
    depends_on:
      - influxdb
    restart: unless-stopped
  - service_name: postgres
    active: true
    image: postgres:14
    environment:
      - "POSTGRES_USER={{ main_username }}"
      - "POSTGRES_PASSWORD={{ postgres.password }}"
      - "POSTGRES_MULTIPLE_DATABASES=\
         nextcloud:{{ postgres.nextcloud_password }},\
         tandoor:{{ postgres.tandoor_password }}"
    volumes:
      - "{{ appdata_path }}/postgresql/data:/var/lib/postgresql/data"
      # Credit to mrts on Github
      # https://github.com/mrts/docker-postgresql-multiple-databases
      # Forked here
      # https://github.com/coredotbin/docker-postgresql-multiple-databases
      - "{{ appdata_path }}/postgresql/docker-postgresql-multiple-databases/\
         create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/\
         create-multiple-postgresql-databases.sh"
    restart: always
  - service_name: influxdb
    active: true
    image: influxdb:2.0
    labels:
      - traefik.enable=true
      - "traefik.http.routers.influxdb.rule=Host(`influxdb.{{ domain_name }}`)"
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
    volumes:
      - "{{ appdata_path }}/influxdb/influxdb2:/var/lib/influxdb2"
    restart: unless-stopped
  - service_name: redis
    active: false
    image: bitnami/redis:latest
    environment:
      - "REDIS_PASSWORD={{ redis_password }}"
    volumes:
      - /var/run/redis.sock:/var/run/redis.sock:z
    restart: always
  # Telegraf - https://registry.hub.docker.com/_/telegraf/
  # https://github.com/influxdata/telegraf/blob/master/docs/CONFIGURATION.md
  # https://github.com/influxdata/telegraf/tree/master/plugins/inputs/docker
  - service_name: telegraf
    active: true
    image: telegraf
    # The Telegraf Docker images now run the telegraf process as the telegraf
    # user/group and no longer as the root user.
    # Get the GID of the docker sock with `stat -c '%g' /var/run/docker.sock`
    user: telegraf:112
    command:
      - "--config=http://influxdb:8086/api/v2/telegrafs/0a4dacd337cbf000"
    volumes:
      # Give the container read-only access to the host root fs
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # Configure connection to influxDB2
      - INFLUX_HOST=http://influxdb:8086
      - "INFLUX_TOKEN={{ influxdb.hypervisor_token }}"
      - "INFLUX_ORG={{ influxdb.org }}"
      - "INFLUX_BUCKET={{ influxdb.bucket }}"
      # Map the host fs
      - HOST_MOUNT_PREFIX=/hostfs
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
    depends_on:
      - influxdb
    restart: unless-stopped
  # TODO: Configure Authelia role
  - service_name: authelia
    active: false
    image: authelia/authelia
    labels:
      - traefik.enable=true
      - "traefik.http.routers.authelia.rule=Host(`login.{{ domain_name }}`)"
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091\
         /api/verify?rd=https://login.{{ domain_name }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=\
         Remote-User,Remote-Groups,Remote-Name,Remote-Email"
    volumes:
      - "{{ appdata_path }}/authelia:{{ container_config_path }}"
    expose:
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
  - service_name: hydroxide
    active: true
    image: ghcr.io/coredotbin/hydroxide-docker:master
    command:
      - "smtp"
    volumes:
      - "{{ appdata_path }}/hydroxide:/.config/hydroxide"
    restart: unless-stopped
  - service_name: grafana
    active: false
    image: grafana/grafana-oss
    labels:
      - traefik.enable=true
      - "traefik.http.routers.grafana.rule=Host(`grafana.{{ domain_name }}`)"
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    depends_on:
      - influxdb
    restart: unless-stopped
  - service_name: homeassistant
    active: true
    image: ghcr.io/home-assistant/home-assistant:stable
    labels:
      - traefik.enable=true
      - "traefik.http.routers.homeassistant.rule=Host(`home.{{ domain_name }}`)"
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
    volumes:
      - "{{ appdata_path }}/homeassistant:{{ container_config_path }}"
      - /etc/localtime:/etc/localtime:ro
      - "{{ media_path }}/homeassistant:/mnt"
    privileged: true
    restart: unless-stopped
  - service_name: unifi
    active: true
    image: jacobalberty/unifi:latest
    ports:
      - 3478:3478
    labels:
      - traefik.enable=true
      # Web interface
      - "traefik.http.routers.unifi.rule=Host(`unifi.{{ domain_name }}`)"
      - traefik.http.routers.unifi.service=unifi@docker
      - traefik.http.routers.unifi.tls=true
      - traefik.http.services.unifi.loadbalancer.server.port=8443
      - traefik.http.services.unifi.loadbalancer.server.scheme=https
      # Inform URL
      - "traefik.http.routers.unifi-inform.rule=Host(`unifi.{{ domain_name }}`)\
         && PathPrefix(`/inform`)"
      - traefik.http.routers.unifi-inform.entrypoints=unifi-inform
      - traefik.http.routers.unifi-inform.service=unifi-inform@docker
      - traefik.http.services.unifi-inform.loadbalancer.server.port=8080
      - traefik.http.services.unifi-inform.loadbalancer.server.scheme=http
    volumes:
      - "{{ appdata_path }}/unifi:/unifi"
    restart: unless-stopped
  - service_name: shinobi
    active: false
    image: registry.gitlab.com/shinobi-systems/shinobi:dev
    labels:
      - traefik.enable=true
      - "traefik.http.routers.shinobi.rule=Host(`shinobi.{{ domain_name }}`)"
      - traefik.http.services.shinobi.loadbalancer.server.port=8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/shm/shinobi/streams:/dev/shm/streams:rw
      - "{{ appdata_path }}/shinobi/config:/config:rw"
      - "{{ appdata_path }}/shinobi/customAutoLoad:/home/Shinobi/libs/\
         customAutoLoad:rw"
      - "{{ appdata_path }}/shinobi/database:/var/lib/mysql:rw"
      - "{{ appdata_path }}/shinobi/plugins:/home/Shinobi/plugins:rw"
      - "{{ media_path }}/recordings:/home/Shinobi/videos:rw"
    restart: unless-stopped
  - service_name: librespeed
    active: false
    image: adolfintel/speedtest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.librespeed.rule=\
         Host(`librespeed.{{ domain_name }}`)"
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - DISABLE_IPINFO=true
      - DISTANCE=false
    restart: unless-stopped
  - service_name: tandoor
    active: true
    image: vabene1111/recipes
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tandoor.rule=Host(`tandoor.{{ domain_name }}`)"
      - traefik.http.services.tandoor.loadbalancer.server.port=8080
    environment:
      - ALLOWED_HOSTS=*
      - "SECRET_KEY={{ tandoor_secret_key }}"
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tandoor
      - "POSTGRES_PASSWORD={{ postgres.tandoor_password }}"
      - POSTGRES_DB=tandoor
    volumes:
      - "{{ appdata_path }}/tandoor/staticfiles:/opt/recipes/staticfiles"
      - "{{ appdata_path }}/tandoor/mediafiles:/opt/recipes/mediafiles"
    depends_on:
      - postgres
    restart: unless-stopped
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ domain_name }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ domain_name }}"
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ media_path }}:/media:z"
    restart: unless-stopped
  - service_name: transmission
    active: true
    image: haugene/transmission-openvpn
    labels:
      - traefik.enable=true
      - "traefik.http.routers.transmission.rule=\
        Host(`transmission.{{ domain_name }}`)"
      - traefik.http.services.transmission.loadbalancer.server.port=9091
    environment:
      - OPENVPN_PROVIDER=protonvpn
      - OPENVPN_CONFIG=ch.protonvpn.net.udp
      - "OPENVPN_USERNAME={{ protonvpn_username }}"
      - "OPENVPN_PASSWORD={{ protonvpn_password }}"
      - LOCAL_NETWORK=10.0.0.0/16
      - TRANSMISSION_HOME=/config
      - TRANSMISSION_DOWNLOAD_DIR=/data
    volumes:
      - "{{ appdata_path }}/transmission:/config"
      - "{{ media_path }}/downloads:/data:z"
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
  - service_name: sonarr
    active: true
    image: linuxserver/sonarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain_name }}`)"
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/sonarr:{{ container_config_path }}"
      - "{{ media_path }}/tv:/tv:z"
      - "{{ media_path }}/downloads/tv:/downloads:z"
    restart: unless-stopped
  - service_name: radarr
    active: true
    image: linuxserver/radarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain_name }}`)"
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/radarr:{{ container_config_path }}"
      - "{{ media_path }}/movies:/movies:z"
      - "{{ media_path }}/downloads/movies:/downloads:z"
    restart: unless-stopped
  - service_name: prowlarr
    active: true
    image: linuxserver/prowlarr:develop
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ domain_name }}`)"
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/prowlarr:{{ container_config_path }}"
    restart: unless-stopped

autorestic_locations:
  - name: nextcloud-data
    from: "{{ media_path }}/nextcloud-data"
    to:
      - backblaze
  - name: hypervisor-app-data
    from: "{{ appdata_path }}"
    to:
      - backblaze
