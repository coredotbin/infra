---

autorestic_locations:
  - name: nextcloud-data
    from: "{{ media_path }}/nextcloud-data"
    to:
      - backblaze
  - name: app-data
    from: "{{ appdata_path}}"
    to:
      - backblaze

# ironicbadger.ansible_role_docker_compose_generator
docker_compose_generator_output_path: /home/corbin
# Global variables
global_env_vars:
  - "PUID=1000"
  - "PGID=1000"
  - "TZ=America/New_York"
# See group_vars/all.yaml for appdata_path and media_path variables
container_config_path: /config
container_data_path: /data

# Container definitions
containers:
  - service_name: traefik
    active: true
    image: traefik
    ports:
      - 80:80     # http
      - 443:443   # https
      - 8080:8080 # unifi-inform
      #- 5432:5432 # postgresql
    command:
      - --api.dashboard=true

      - --providers.docker
      - --providers.docker.exposedByDefault=false
      
      # Entrypoints
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.http.http.redirections.entryPoint.scheme=https

      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.certresolver=linode
      - "--entrypoints.https.http.tls.domains[0].main={{ domain_name }}"
      - "--entrypoints.https.http.tls.domains[0].sans=*.{{ domain_name }}"

      - --entrypoints.unifi-inform.address=:8080

      #- --entrypoints.postgresql.address=:5432

      # Let's Encrypt certificates
      - --certificatesResolvers.linode.acme.dnsChallenge.provider=linode
      - "--certificatesResolvers.linode.acme.email={{ admin_email_address }}"
      - --certificatesResolvers.linode.acme.storage=/etc/traefik/acme.json
      
      - --serversTransport.insecureSkipVerify=true
    environment:
      - "LINODE_TOKEN={{ linode_dns_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik/config:/etc/traefik"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - treafik.http.routers.api.entrypoints=http
      - "traefik.http.routers.api.rule=Host(`traefik.{{ domain_name }}`)"
      - traefik.http.routers.api.service=api@internal
    restart: unless-stopped
  - service_name: postgres
    active: true
    image: postgres:14
    #labels:
    #  - traefik.enable=true
    #  - "treafik.tcp.routers.postgres.rule=Host(`postgres.{{ domain_name `)"
    #  - traefik.tcp.services.postgres.loadbalancer.server.port=5432
    #  - traefik.tcp.routers.postgres.entrypoints=postgresql
    #ports:
    #  - 5432:5432
    environment:
      - "POSTGRES_USER={{ main_username }}"
      - "POSTGRES_PASSWORD={{ postgres_pass }}"
      - "POSTGRES_MULTIPLE_DATABASES=nextcloud:{{ postgres_nextcloud_pass }},tandoor:{{ postgres_tandoor_pass }},gitea:{{ postgres_gitea_pass }}"
    volumes:
      - "{{ appdata_path }}/postgresql/data:/var/lib/postgresql/data"
      # Credit to mrts on Github - https://github.com/mrts/docker-postgresql-multiple-databases
      # Forked here - https://github.com/coredotbin/docker-postgresql-multiple-databases
      - "{{ appdata_path }}/postgresql/docker-postgresql-multiple-databases/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh"
    restart: always
  - service_name: redis
    active: false
    image: bitnami/redis:latest
    #labels:
    #  - traefik.enable=true
    #  - "traefik.http.routers.redis.rule=Host(`redis.{{ domain_name }}`)"
    #  - traefik.http.services.redis.loadbalancer.server.port=6379
    environment:
      - "REDIS_PASSWORD={{ redis_password }}"
    volumes:
      - /var/run/redis.sock:/var/run/redis.sock:z
    restart: always
  - service_name: authelia # TODO: Configure Authelia role
    active: false
    image: authelia/authelia
    labels:
      - traefik.enable=true
      - "traefik.http.routers.authelia.rule=Host(`login.{{ domain_name }}`)"
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.{{ domain_name }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    volumes:
      - "{{ appdata_path }}/authelia:{{ container_config_path }}"
    expose:
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
  - service_name: hydroxide
    active: true
    image: ghcr.io/coredotbin/hydroxide-docker:master
    command:
      - "smtp"
    volumes:
      - "{{ appdata_path }}/hydroxide:/.config/hydroxide"
    restart: unless-stopped
  - service_name: homeassistant
    active: true
    image: ghcr.io/home-assistant/home-assistant:stable
    labels:
      - traefik.enable=true
      - "traefik.http.routers.homeassistant.rule=Host(`home.{{ domain_name }}`)"
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
    volumes:
      - "{{ appdata_path }}/homeassistant:{{ container_config_path }}"
      - /etc/localtime:/etc/localtime:ro
      - "{{ media_path }}/homeassistant:/mnt"
    privileged: true
    restart: unless-stopped
  - service_name: unifi
    active: true
    #image: lscr.io/linuxserver/unifi-controller:latest
    image: jacobalberty/unifi:latest
    ports:
      - 3478:3478
    labels:
      - traefik.enable=true
      - "traefik.http.routers.unifi.rule=Host(`unifi.{{ domain_name }}`)"
      - traefik.http.routers.unifi.service=unifi@docker
      - traefik.http.routers.unifi.tls=true
      - traefik.http.services.unifi.loadbalancer.server.port=8443
      - traefik.http.services.unifi.loadbalancer.server.scheme=https
      - "traefik.http.routers.unifi-inform.rule=Host(`unifi.{{ domain_name }}`) && PathPrefix(`/inform`)"
      - traefik.http.routers.unifi-inform.entrypoints=unifi-inform
      - traefik.http.routers.unifi-inform.service=unifi-inform@docker
      - traefik.http.services.unifi-inform.loadbalancer.server.port=8080
      - traefik.http.services.unifi-inform.loadbalancer.server.scheme=http
    volumes:
      #- "{{ appdata_path }}/unifi:/config"
      - "{{ appdata_path }}/unifi:/unifi"
    restart: unless-stopped
  - service_name: shinobi
    active: true
    image: registry.gitlab.com/shinobi-systems/shinobi:dev
    labels:
      - traefik.enable=true
      - "traefik.http.routers.shinobi.rule=Host(`shinobi.{{ domain_name }}`)"
      - traefik.http.services.shinobi.loadbalancer.server.port=8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/shm/shinobi/streams:/dev/shm/streams:rw
      - "{{ appdata_path }}/shinobi/config:/config:rw"
      - "{{ appdata_path }}/shinobi/customAutoLoad:/home/Shinobi/libs/customAutoLoad:rw"
      - "{{ appdata_path }}/shinobi/database:/var/lib/mysql:rw"
      - "{{ appdata_path }}/shinobi/plugins:/home/Shinobi/plugins:rw"
      - "{{ media_path }}/recordings:/home/Shinobi/videos:rw"
    restart: unless-stopped
  - service_name: gitea
    active: true
    image: gitea/gitea:1.16.9
    labels:
      - traefik.enable=true
      - "traefik.http.routers.gitea.rule=Host(`gitea.{{ domain_name }}`)"
      - traefik.http.services.gitea.loadbalancer.server.port=3000
    include_global_env_vars: true
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - "GITEA__database__PASS={{ postgres_gitea_pass }}"
    volumes:
      - "{{ appdata_path }}/gitea:/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
    restart: unless-stopped
  - service_name: librespeed
    active: true
    image: adolfintel/speedtest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.librespeed.rule=Host(`librespeed.{{ domain_name }}`)"
      - traefik.http.services.librespeed.loadbalancer.server.port=80
    environment:
      - MODE=standalone
      - DISABLE_IPINFO=true
      - DISTANCE=false
    restart: unless-stopped
  - service_name: tandoor
    active: true
    image: vabene1111/recipes
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tandoor.rule=Host(`recipes.{{ domain_name }}`)"
      - traefik.http.services.tandoor.loadbalancer.server.port=8080
    environment:
      - ALLOWED_HOSTS=*
      - "SECRET_KEY={{ tandoor_secret_key }}"
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tandoor
      - "POSTGRES_PASSWORD={{ postgres_pass }}"
      - POSTGRES_DB=tandoor
    volumes:
      - "{{ appdata_path }}/tandoor/staticfiles:/opt/recipes/staticfiles"
      - "{{ appdata_path }}/tandoor/mediafiles:/opt/recipes/mediafiles"
    depends_on:
      - postgres
    restart: unless-stopped
  - service_name: audiobookshelf
    active: ture
    image: ghcr.io/advplyr/audiobookshelf:latest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.audiobookshelf.rule=Host(`audiobookshelf.{{ domain_name }}`)"
      - traefik.http.services.audiobookshelf.loadbalancer.server.port=80
    include_global_env_vars: true
    environment:
      - AUDIOBOOKSHELF_UID=1000
      - AUDIOBOOKSHELF_GID=1000
    volumes:
      - "{{ media_path }}/audiobooks:/audiobooks"
      - "{{ media_path }}/podcasts:/podcasts"
      - "{{ media_path }}/audiobookshelf/metadata:/metadata"
      - "{{ appdata_path }}/audiobookshelf:/config"
    restart: unless-stopped
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ domain_name }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ domain_name }}"
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ media_path }}:/media:z"
    restart: unless-stopped
  - service_name: transmission
    active: false
    image: haugene/transmission-openvpn
    labels:
      - traefik.enable=true
      - "traefik.http.routers.transmission.rule=Host(`transmission.{{ domain_name }}`)"
      - traefik.http.services.transmission.loadbalancer.server.port=9091
    environment:
      #- OPENVPN_PROVIDER=protonvpn
      #- OPENVPN_CONFIG=node-ch-05.protonvpn.net.tcp
      #- OPENVPN_CONFIG=switzerland
      #- "OPENVPN_USERNAME={{ protonvpn_username }}"
      #- "OPENVPN_PASSWORD={{ protonvpn_password }}"
      - OPENVPN_PROVIDER=PIA
      - OPENVPN_CONFIG=switzerland
      - "OPENVPN_USERNAME={{ pia_username }}"
      - "OPENVPN_PASSWORD={{ pia_password }}"
      - LOCAL_NETWORK=10.0.0.0/16
      - TRANSMISSION_HOME=/config
      - TRANSMISSION_DOWNLOAD_DIR=/data
      #- OPENVPN_OPTS="--inactive 3600 --ping 10 --ping-exit 60"
      #- ENABLE_UFW=false
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/transmission:/config"
      - "{{ media_path }}/downloads:/data:z"
    cap_add:
      - NET_ADMIN
    logging:
      driver: json-file
      options:
        max-size: 10m
    restart: unless-stopped
  - service_name: sonarr
    active: true
    image: linuxserver/sonarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain_name }}`)"
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/sonarr:{{ container_config_path }}"
      - "{{ media_path }}/tv:/tv:z"
      - "{{ media_path }}/downloads/tv:/downloads:z"
    restart: unless-stopped
  - service_name: radarr
    active: true
    image: linuxserver/radarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain_name }}`)"
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/radarr:{{ container_config_path }}"
      - "{{ media_path }}/movies:/movies:z"
      - "{{ media_path }}/downloads/movies:/downloads:z"
    restart: unless-stopped
  - service_name: prowlarr
    active: true
    image: linuxserver/prowlarr:develop
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ domain_name }}`)"
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/prowlarr:{{ container_config_path }}"
    restart: unless-stopped
