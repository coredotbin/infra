---

# ironicbadger.docker_compose_generator
appdata_path: /pool1/app-data
media_path: /pool1/media

# Container definitions
containers:
  - service_name: traefik
    active: true
    image: traefik
    ports:
      # http
      - 80:80
      # https
      - 443:443
      # unifi-inform
      - 8080:8080
      # coit
      - 5683:5683/udp
    command:
      # https://doc.traefik.io/traefik/reference/static-configuration/cli/
      # Additional (non-Docker integration) routers should be added in the
      # static configuration file.
      # TODO: Add Traefik role?

      # Dashboard
      - --api.dashboard=true

      # Providers (Docker integration)
      - --providers.docker
      - --providers.docker.exposedByDefault=false

      # Entrypoints
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.http.http.redirections.entryPoint.scheme=https
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.certresolver=linode
      - "--entrypoints.https.http.tls.domains[0].main={{ domain_name }}"
      - "--entrypoints.https.http.tls.domains[0].sans=*.{{ domain_name }}"
      - --entrypoints.unifi-inform.address=:8080
      - --entrypoints.coit.address=:5683/udp

      # Let's Encrypt certificates
      - --certificatesResolvers.linode.acme.dnsChallenge.provider=linode
      - "--certificatesResolvers.linode.acme.email={{ admin_email_address }}"
      - --certificatesResolvers.linode.acme.storage=/etc/traefik/acme.json

      - --serversTransport.insecureSkipVerify=true

      # Metrics
      - --metrics.influxdb2.address=http://influxdb:8086
      - "--metrics.influxdb2.token={{ influxdb.traefik_token }}"
      - "--metrics.influxdb2.org={{ influxdb.org }}"
      - "--metrics.influxdb2.bucket={{ influxdb.bucket }}"
    environment:
      - "LINODE_TOKEN={{ linode_dns_api_key }}"
    volumes:
      - "{{ appdata_path }}/traefik/config:/etc/traefik"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      ## Router for dashboard
      - traefik.enable=true
      - treafik.http.routers.api.entrypoints=http,https
      # Require authentication through Authelia for dashboard
      # Note: Disable this when testing/changing Authelia! Will get a 404 if
      # Authelia is not working correctly.
      - traefik.http.routers.api.middlewares=authelia@docker
      - "traefik.http.routers.api.rule=Host(`traefik.{{ domain_name }}`)"
      - traefik.http.routers.api.service=api@internal
      ## Flame
      - flame.type=application
      - flame.name=Traefik Dashboard
      - "flame.url=https://traefik.{{ domain_name }}"
      - flame.icon=server
    depends_on:
      - influxdb
    restart: unless-stopped

  # PostgreSQL
  # https://github.com/docker-library/docs/blob/master/postgres/README.md
  # Used for
  # - Authelia
  # - Nextcloud (WIP)
  # - Tandoor
  - service_name: postgres
    active: true
    image: postgres:14
    environment:
      - "POSTGRES_USER={{ main_username }}"
      - "POSTGRES_PASSWORD={{ postgres.password }}"
      # Credit to mrts on Github
      # https://github.com/mrts/docker-postgresql-multiple-databases
      # Forked here
      # https://github.com/coredotbin/docker-postgresql-multiple-databases
      - "POSTGRES_MULTIPLE_DATABASES=\
         authelia:{{ postgres.authelia_password }},\
         nextcloud:{{ postgres.nextcloud_password }},\
         tandoor:{{ postgres.tandoor_password }},\
         netbox:{{ postgres.netbox_password }}"
    volumes:
      - "{{ appdata_path }}/postgresql/data:/var/lib/postgresql/data"
      - "{{ appdata_path }}/postgresql/docker-postgresql-multiple-databases/\
         create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/\
         create-multiple-postgresql-databases.sh"
    restart: always

  # InfluxDB - https://docs.influxdata.com/influxdb/v2.6/install/?t=Docker
  # Accessed by other containers over the default Docker network
  # Used for
  # - Telegraf
  # - Traefik metrics
  - service_name: influxdb
    active: true
    image: influxdb:2.0
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.influxdb.entrypoints=http,https
      - "traefik.http.routers.influxdb.rule=Host(`influxdb.{{ domain_name }}`)"
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      # Flame
      - flame.type=application
      - flame.name=InfluxDB
      - "flame.url=https://influxdb.{{ domain_name }}"
      - flame.icon=chart-line
    volumes:
      - "{{ appdata_path }}/influxdb/influxdb2:/var/lib/influxdb2"
    restart: unless-stopped

  # Redis - https://github.com/bitnami/containers/tree/main/bitnami/redis
  - service_name: redis
    active: true
    image: bitnami/redis:latest
    environment:
      - "REDIS_PASSWORD={{ redis_password }}"
    volumes:
      - /var/run/redis.sock:/var/run/redis.sock:z
    restart: always

  # Telegraf - https://registry.hub.docker.com/_/telegraf/
  # https://github.com/influxdata/telegraf/blob/master/docs/CONFIGURATION.md
  # https://github.com/influxdata/telegraf/tree/master/plugins/inputs/docker
  - service_name: telegraf
    active: true
    image: telegraf
    # The Telegraf Docker images now run the telegraf process as the telegraf
    # user/group and no longer as the root user.
    # Get the GID of the docker sock with `stat -c '%g' /var/run/docker.sock`
    user: telegraf:112
    command:
      - "--config=http://influxdb:8086/api/v2/telegrafs/0a4dacd337cbf000"
    volumes:
      # Give the container read-only access to the host root fs
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # Configure connection to influxDB2
      - INFLUX_HOST=http://influxdb:8086
      - "INFLUX_TOKEN={{ influxdb.hypervisor_token }}"
      - "INFLUX_ORG={{ influxdb.org }}"
      - "INFLUX_BUCKET={{ influxdb.bucket }}"
      # Map the host fs
      - HOST_MOUNT_PREFIX=/hostfs
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
    depends_on:
      - influxdb
    restart: unless-stopped

  # Authelia - https://www.authelia.com/integration/deployment/docker/
  - service_name: authelia
    active: true
    image: authelia/authelia
    # https://www.authelia.com/configuration/methods/environment/
    # Commented vars are already set in the configuration file and should not
    # be overwritten at this time.
    environment:
      # TODO: Set up Authelia Ansible role to manage this configuration file
      # - "AUTHELIA_JWT_SECRET_FILE={{ container_config_path }}/secrets/jwt"
      - AUTHELIA_THEME=dark
      - AUTHELIA_LOG_LEVEL=info
      - "AUTHELIA_DEFAULT_REDIRECTION_URL=https://dashboard.{{ domain_name }}"

      # Authentication
      # This needs a backslash at the end of line!
      # - "AUTHELIA_AUTHENTICATION_BACKEND_FILE_PATH={{ container_config_path }}
      #   /users.yaml"
      # - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PASSWORD_ALGORITHM=argon2id
      # - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PASSWORD_ITERATIONS=2
      # - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PASSWORD_SALT_LENGTH=24
      # - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PASSWORD_PARALLELISM=8
      # - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PASSWORD_MEMORY=64

      # # Access Control
      # - AUTHELIA_ACCESS_CONTROL_DEFAULT_POLICY=deny

      # # Two Factor
      # - AUTHELIA_TOTP_ISSUER=authelia.com

      # # Session
      # - AUTHELIA_SESSION_NAME=authelia_session
      # - "AUTHELIA_SESSION_SECRET_FILE={{ container_config_path }}\
      #    /secrets/session"
      # # Unsure of default bitnami/redis username at this time
      # # - AUTHELIA_SESSION_REDIS_HOST=redis
      # # - AUTHELIA_SESSION_REDIS_PORT=
      # # - AUTHELIA_SESSION_REDIS_USERNAME=
      # # - "AUTHELIA_SESSION_REDIS_PASSWORD_FILE={{ container_config_path }}\
      # # /secrets/redis"

      # # Storage
      # - AUTHELIA_STORAGE_POSTGRES_HOST=postgres
      # - AUTHELIA_STORAGE_POSTGRES_PORT=5432
      # - AUTHELIA_STORAGE_POSTGRES_DATABASE=authelia
      # - AUTHELIA_STORAGE_POSTGRES_USERNAME=authelia
      # - "AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE={{ container_config_path }}\
      #    /secrets/postgres"

      # # Notifier
      # - "AUTHELIA_NOTIFIER_FILESYSTEM_FILENAME={{ container_config_path }}\
      #   /notifications.txt"
      # TODO: Configure email notification
      # - AUTHELIA_NOTIFIER_SMTP_HOST=
      # - AUTHELIA_NOTIFIER_SMTP_USERNAME=
      # - "AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE={{ container_config_path }}\
      #    /secrets/smtp"
    labels:
      # Apply the authelia middleware to containers with the following label
      # - traefik.http.routers.<name>.middlewares=authelia@docker
      - traefik.enable=true
      - "traefik.http.routers.authelia.rule=Host(`login.{{ domain_name }}`)"
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=\
         http://authelia:9091/api/verify?rd=https://login.{{ domain_name }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=\
         Remote-User,Remote-Groups,Remote-Name,Remote-Email"
    volumes:
      - "{{ appdata_path }}/authelia:{{ container_config_path }}"
    expose:
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  - service_name: hydroxide
    active: true
    image: ghcr.io/coredotbin/hydroxide-docker:master
    command:
      - "smtp"
    volumes:
      - "{{ appdata_path }}/hydroxide:/.config/hydroxide"
    restart: unless-stopped

  # Flame dashboard - https://github.com/pawelmalak/flame
  - service_name: flame
    active: true
    image: pawelmalak/flame
    labels:
      - traefik.enable=true
      - traefik.http.routers.flame.entrypoints=http,https
      - traefik.http.routers.flame.middlewares=authelia@docker
      - "traefik.http.routers.flame.rule=Host(`dashboard.{{ domain_name }}`)"
      - traefik.http.services.flame.loadbalancer.server.port=5005
    # environment:
    #   - "PASSWORD={{ flame_password }}"
    volumes:
      - "{{ appdata_path }}/flame:/app/data"
      # Trying out the Docker integration..
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  # Grafana
  # https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/
  # TODO: Set up log aggregation
  # https://grafana.com/docs/loki/latest/clients/promtail/
  # https://grafana.com/oss/loki/
  - service_name: grafana
    active: false
    image: grafana/grafana-oss
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.entrypoints=http,https
      - "traefik.http.routers.grafana.rule=Host(`grafana.{{ domain_name }}`)"
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    depends_on:
      - influxdb
    restart: unless-stopped

  # Home Assistant
  # https://www.home-assistant.io/installation/generic-x86-64#docker-compose
  - service_name: homeassistant
    active: true
    image: ghcr.io/home-assistant/home-assistant:stable
    labels:
      # Traefik
      - traefik.enable=true
      # HTTP
      - traefik.http.routers.homeassistant.entrypoints=http,https
      - "traefik.http.routers.homeassistant.rule=Host(`home.{{ domain_name }}`)"
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
      - "traefik.http.services.homeassistant.loadbalancer.healthcheck\
         .path=/lovelace"
      # CoIT - Shelly
      # https://www.home-assistant.io/integrations/shelly/
      - traefik.udp.routers.hass-coit.entrypoints=coit
      - "traffik.udp.routers.hass-coit.rule=Host(`home.{{ domain_name }}`)"
      - traefik.udp.services.hass-coit.loadbalancer.server.port=5683
      # Flame
      - flame.type=application
      - flame.name=Home Assistant
      - "flame.url=https://home.{{ domain_name }}"
      - flame.icon=home-assistant
    volumes:
      - "{{ appdata_path }}/homeassistant:{{ container_config_path }}"
      - /etc/localtime:/etc/localtime:ro
      - "{{ media_path }}/homeassistant:/mnt"
    privileged: true
    restart: unless-stopped

  # Unifi Controller - https://github.com/jacobalberty/unifi-docker
  - service_name: unifi
    active: true
    image: jacobalberty/unifi:latest
    ports:
      - 3478:3478
    labels:
      ## Traefik
      - traefik.enable=true
      # Web interface
      - traefik.http.routers.unifi.entrypoints=http,https
      - "traefik.http.routers.unifi.rule=Host(`unifi.{{ domain_name }}`) \
         && !PathPrefix(`/inform`)"
      - traefik.http.routers.unifi.service=unifi@docker
      - traefik.http.routers.unifi.tls=true
      - traefik.http.services.unifi.loadbalancer.server.port=8443
      - traefik.http.services.unifi.loadbalancer.server.scheme=https
      - "traefik.http.services.unifi.loadbalancer.healthcheck\
        .path=/manage/account/login"
      # Inform URL
      - "traefik.http.routers.unifi-inform.rule=Host(`unifi.{{ domain_name }}`)"
      - traefik.http.routers.unifi-inform.entrypoints=unifi-inform
      - traefik.http.routers.unifi-inform.service=unifi-inform@docker
      - traefik.http.services.unifi-inform.loadbalancer.server.port=8080
      - traefik.http.services.unifi-inform.loadbalancer.server.scheme=http
      - "traefik.http.services.unifi-inform.loadbalancer.healthcheck\
        .path=/inform"
      ## Flame
      - flame.type=application
      - flame.name=UniFi
      - "flame.url=https://unifi.{{ domain_name }}"
      - flame.icon=lan
    volumes:
      - "{{ appdata_path }}/unifi:/unifi"
    restart: unless-stopped

  - service_name: librespeed
    active: false
    image: adolfintel/speedtest
    labels:
      # Traefik
      - traefik.enable=true
      - "traefik.http.routers.librespeed.rule=\
         Host(`speedtest.{{ domain_name }}`)"
      - traefik.http.services.librespeed.loadbalancer.server.port=80
      # Flame
      - flame.type=application
      - flame.name=LibreSpeed
      - "flame.url=https://speedtest.{{ domain_name }}"
      - flame.icon=speedometer
    environment:
      - MODE=standalone
      - DISABLE_IPINFO=true
      - DISTANCE=false
    restart: unless-stopped

  # Tandoor - https://github.com/TandoorRecipes/recipes
  - service_name: tandoor
    active: true
    image: vabene1111/recipes
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.tandoor.entrypoints=http,https
      - "traefik.http.routers.tandoor.rule=Host(`tandoor.{{ domain_name }}`)"
      - traefik.http.services.tandoor.loadbalancer.server.port=8080
      # Flame
      - flame.type=application
      - flame.name=Tandoor
      - "flame.url=https://tandoor.{{ domain_name }}"
    environment:
      - ALLOWED_HOSTS=*
      - "SECRET_KEY={{ tandoor_secret_key }}"
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tandoor
      - "POSTGRES_PASSWORD={{ postgres.tandoor_password }}"
      - POSTGRES_DB=tandoor
    volumes:
      - "{{ appdata_path }}/tandoor/staticfiles:/opt/recipes/staticfiles"
      - "{{ appdata_path }}/tandoor/mediafiles:/opt/recipes/mediafiles"
    depends_on:
      - postgres
    restart: unless-stopped

  # Jellyfin - https://jellyfin.org/docs/general/installation/container#docker
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entrypoints=http,https
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ domain_name }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - "traefik.http.services.jellyfin.loadbalancer.healthcheck\
        .path=/web/index.html"
      # Flame
      - flame.type=application
      - flame.name=Jellyfin
      - "flame.url=https://jellyfin.{{ domain_name }}"
      - flame.icon=movie-outline
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ domain_name }}"
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ media_path }}:/media:z"
    restart: unless-stopped

  # Media stack - Transmission with OpenVPN, Radarr, Sonarr, and Prowlarr
  # Transmission - https://github.com/haugene/docker-transmission-openvpn
  # Radarr - https://docs.linuxserver.io/images/docker-radarr/
  # Sonarr - https://docs.linuxserver.io/images/docker-sonarr/
  # Prowlarr - https://docs.linuxserver.io/images/docker-prowlarr/
  - service_name: transmission
    active: true
    image: haugene/transmission-openvpn
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.transmission.entrypoints=http,https
      - traefik.http.routers.transmission.middlewares=authelia@docker
      - "traefik.http.routers.transmission.rule=\
        Host(`transmission.{{ domain_name }}`)"
      - traefik.http.services.transmission.loadbalancer.server.port=9091
      # Flame
      - flame.type=application
      - flame.name=Transmission
      - "flame.url=https://transmission.{{ domain_name }}"
      - flame.icon=download
    environment:
      - OPENVPN_PROVIDER=protonvpn
      - OPENVPN_CONFIG=ch.protonvpn.udp
      - "OPENVPN_USERNAME={{ protonvpn_username }}"
      - "OPENVPN_PASSWORD={{ protonvpn_password }}"
      - LOCAL_NETWORK=10.0.0.0/16
      - TRANSMISSION_HOME=/config
      - TRANSMISSION_DOWNLOAD_DIR=/data
    volumes:
      - "{{ appdata_path }}/transmission:/config"
      - "{{ media_path }}/downloads:/data:z"
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
  - service_name: sonarr
    active: true
    image: linuxserver/sonarr
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.sonarr.entrypoints=http,https
      - traefik.http.routers.sonarr.middlewares=authelia@docker
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain_name }}`)"
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      # Flame
      - flame.type=application
      - flame.name=Sonarr
      - "flame.url=https://sonarr.{{ domain_name }}"
      - flame.icon=television-classic
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/sonarr:{{ container_config_path }}"
      - "{{ media_path }}/tv:/tv:z"
      - "{{ media_path }}/downloads/tv:/downloads:z"
    restart: unless-stopped
  - service_name: radarr
    active: true
    image: linuxserver/radarr
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.radarr.entrypoints=http,https
      - treafik.http.routers.radarr.middlewares=authelia@docker
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain_name }}`)"
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      # Flame
      - flame.type=application
      - flame.name=Radarr
      - "flame.url=https://radarr.{{ domain_name }}"
      - flame.icon=movie-outline
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/radarr:{{ container_config_path }}"
      - "{{ media_path }}/movies:/movies:z"
      - "{{ media_path }}/downloads/movies:/downloads:z"
    restart: unless-stopped
  - service_name: prowlarr
    active: true
    image: linuxserver/prowlarr:develop
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.http.routers.prowlarr.entrypoints=http,https
      - traefik.http.routers.prowlarr.middlewares=authelia@docker
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ domain_name }}`)"
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      # Flame
      - flame.type=application
      - flame.name=Prowlarr
      - "flame.url=https://prowlarr.{{ domain_name }}"
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/prowlarr:{{ container_config_path }}"
    restart: unless-stopped

  # NetBox - https://github.com/netbox-community/netbox-docker
  - service_name: netbox
    active: true
    image: "docker.io/netboxcommunity/netbox:{{ netbox.version_string }}"
    anchor: netbox
    ports:
      - 8080
    user: 'unit:root'
    depends_on:
      - netbox-postgres
      - netbox-redis
      - netbox-redis-cache
    labels:
      - traefik.enable=true
      - traefik.http.routers.netbox.entrypoints=http,https
      - "traefik.http.routers.netbox.rule=Host(`netbox.{{ domain_name }}`)"
      - traefik.http.services.netbox.loadbalancer.server.port=8080
    environment:
      # Configure here, not in a separate env file
      # General configuration
      - CORS_ORIGIN_ALLOW_ALL=true
      - SKIP_SUPERUSER=true
      - GRAPHQL_ENABLED=true
      - METRICS_ENABLED=false
      - WEBHOOKS_ENABLED=true
      - HOUSEKEEPING_INTERVAL=86400
      - MEDIA_ROOT=/opt/netbox/netbox/media
      - "RELEASE_CHECK_URL=https://api.github.com/repos/netbox-community\
        /netbox/releases"
      - "SECRET_KEY={{ netbox.secret_key }}"
      # Database configuration
      - DB_WAIT_DEBUG=1
      - DB_HOST=netbox-postgres
      - DB_NAME=netbox
      - DB_USER=netbox
      - "DB_PASSWORD={{ postgres.netbox_password }}"
      # Email configuration
      # - EMAIL_SERVER=hydroxide
      # - EMAIL_PORT=1025
      # - "EMAIL_FROM=netbox@{{ domain_name }}"
      # - "EMAIL_USERNAME={{ hydroxide.username }}"
      # - "EMAIL_PASSWORD={{ hydroxide.password }}"
      # - EMAIL_SSL_CERTFILE=
      # - EMAIL_SSL_KEYFILE=
      # - EMAIL_TIMEOUT=5
      # - EMAIL_USE_SSL=false
      # - EMAIL_USE_TLS=false
      # Redis cache configuration
      - REDIS_CACHE_DATABASE=1
      - REDIS_CACHE_HOST=netbox-redis-cache
      - "REDIS_CACHE_PASSWORD={{ netbox.redis_password }}"
      - REDIS_CACHE_SSL=false
      - REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY=false
      # Redis configuration
      - REDIS_DATABASE=0
      - REDIS_HOST=netbox-redis
      - "REDIS_PASSWORD={{ netbox.redis_password }}"
      - REDIS_SSL=false
    healthcheck:
      start_period: 60s
      timeout: 3s
      interval: 15s
      test: "curl -f http://localhost:8080/api/ || exit 1"
    volumes:
      - "{{ appdata_path }}/netbox/configuration:/etc/netbox/config:z,ro"
      - "{{ media_path }}/netbox/media:/opt/netbox/netbox/media:rw"
      - "{{ media_path }}/netbox/reports:/opt/netbox/netbox/reports:rw"
      - "{{ appdata_path }}/netbox/scripts:/opt/netbox/netbox/scripts:rw"
  - service_name: netbox-worker
    active: true
    fragment: netbox
    ports:
    labels:
    depends_on:
      - service: netbox
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q rqworker || exit 1"
  - service_name: netbox-housekeeping
    active: true
    fragment: netbox
    ports:
    labels:
    depends_on:
      - service: netbox
        condition: service_healthy
    command:
      - /opt/netbox/housekeeping.sh
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q housekeeping || exit 1"
  - service_name: netbox-postgres
    active: true
    image: docker.io/postgres:15-alpine
    environment:
      - POSTGRES_DB=netbox
      - POSTGRES_USER=netbox
      - "POSTGRES_PASSWORD={{ postgres.netbox_password }}"
    volumes:
      - "{{ appdata_path }}/netbox/postgres:/var/lib/postgresql/data"
    restart: unless-stopped
  - service_name: netbox-redis
    active: true
    image: docker.io/redis:7-alpine
    environment:
      - "REDIS_PASSWORD={{ netbox.redis_password }}"
    command:
      - sh
      # This is to evaluate the $REDIS_PASSWORD from the env
      - -c
      # $$ because of docker compose
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD
    volumes:
      # Using appdata_path here because it's on an SSD
      - "{{ appdata_path }}/netbox/redis:/data"
  - service_name: netbox-redis-cache
    active: true
    image: docker.io/redis:7-alpine
    environment:
      - "REDIS_PASSWORD={{ netbox.redis_password }}"
    command:
      - sh
      # This is to evaluate the $REDIS_PASSWORD from the env
      - -c
      # $$ because of docker compose
      - redis-server --requirepass $$REDIS_PASSWORD
    volumes:
      # Using appdata_path here because it's on an SSD
      - "{{ appdata_path }}/netbox/redis-cache:/data"

autorestic_locations:
  - name: nextcloud-data
    from: "{{ media_path }}/nextcloud-data"
    to:
      - backblaze
  - name: hypervisor-app-data
    from: "{{ appdata_path }}"
    to:
      - backblaze
